//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""b2882b4b-4257-406f-932a-4b734eef1608"",
            ""actions"": [
                {
                    ""name"": ""North"",
                    ""type"": ""Button"",
                    ""id"": ""abe05507-b7d1-4ddc-aaed-d356a38bf237"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""South"",
                    ""type"": ""Button"",
                    ""id"": ""324c4c9c-fa0f-4560-a576-2a4944d563fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""West"",
                    ""type"": ""Button"",
                    ""id"": ""72bcb946-e8fa-4e02-8888-8239769cfbf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""East"",
                    ""type"": ""Button"",
                    ""id"": ""370c407f-d458-41af-af14-bc598fcf2466"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9b730a66-fd03-4215-a761-dadb2cb40e62"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""North"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""281911c3-ee81-4594-8548-6c333be2bfb2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""South"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""653994b4-6c65-431d-9502-7c85ebbd5167"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""West"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8d48ca9-1a9b-4108-9549-378414dda84f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""East"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interactions"",
            ""id"": ""05330d06-123d-4253-a8fd-74dc3046bd46"",
            ""actions"": [
                {
                    ""name"": ""Grab Item"",
                    ""type"": ""Button"",
                    ""id"": ""b2c1b716-dd0f-4ff8-94b9-b680b2b559f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19e998b7-3d81-4d54-977e-7df0e8ea94d8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_North = m_Movement.FindAction("North", throwIfNotFound: true);
        m_Movement_South = m_Movement.FindAction("South", throwIfNotFound: true);
        m_Movement_West = m_Movement.FindAction("West", throwIfNotFound: true);
        m_Movement_East = m_Movement.FindAction("East", throwIfNotFound: true);
        // Interactions
        m_Interactions = asset.FindActionMap("Interactions", throwIfNotFound: true);
        m_Interactions_GrabItem = m_Interactions.FindAction("Grab Item", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_North;
    private readonly InputAction m_Movement_South;
    private readonly InputAction m_Movement_West;
    private readonly InputAction m_Movement_East;
    public struct MovementActions
    {
        private @Inputs m_Wrapper;
        public MovementActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @North => m_Wrapper.m_Movement_North;
        public InputAction @South => m_Wrapper.m_Movement_South;
        public InputAction @West => m_Wrapper.m_Movement_West;
        public InputAction @East => m_Wrapper.m_Movement_East;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @North.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnNorth;
                @North.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnNorth;
                @North.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnNorth;
                @South.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnSouth;
                @South.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnSouth;
                @South.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnSouth;
                @West.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnWest;
                @West.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnWest;
                @West.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnWest;
                @East.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnEast;
                @East.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnEast;
                @East.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnEast;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @North.started += instance.OnNorth;
                @North.performed += instance.OnNorth;
                @North.canceled += instance.OnNorth;
                @South.started += instance.OnSouth;
                @South.performed += instance.OnSouth;
                @South.canceled += instance.OnSouth;
                @West.started += instance.OnWest;
                @West.performed += instance.OnWest;
                @West.canceled += instance.OnWest;
                @East.started += instance.OnEast;
                @East.performed += instance.OnEast;
                @East.canceled += instance.OnEast;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Interactions
    private readonly InputActionMap m_Interactions;
    private IInteractionsActions m_InteractionsActionsCallbackInterface;
    private readonly InputAction m_Interactions_GrabItem;
    public struct InteractionsActions
    {
        private @Inputs m_Wrapper;
        public InteractionsActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @GrabItem => m_Wrapper.m_Interactions_GrabItem;
        public InputActionMap Get() { return m_Wrapper.m_Interactions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionsActions set) { return set.Get(); }
        public void SetCallbacks(IInteractionsActions instance)
        {
            if (m_Wrapper.m_InteractionsActionsCallbackInterface != null)
            {
                @GrabItem.started -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnGrabItem;
                @GrabItem.performed -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnGrabItem;
                @GrabItem.canceled -= m_Wrapper.m_InteractionsActionsCallbackInterface.OnGrabItem;
            }
            m_Wrapper.m_InteractionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @GrabItem.started += instance.OnGrabItem;
                @GrabItem.performed += instance.OnGrabItem;
                @GrabItem.canceled += instance.OnGrabItem;
            }
        }
    }
    public InteractionsActions @Interactions => new InteractionsActions(this);
    public interface IMovementActions
    {
        void OnNorth(InputAction.CallbackContext context);
        void OnSouth(InputAction.CallbackContext context);
        void OnWest(InputAction.CallbackContext context);
        void OnEast(InputAction.CallbackContext context);
    }
    public interface IInteractionsActions
    {
        void OnGrabItem(InputAction.CallbackContext context);
    }
}
